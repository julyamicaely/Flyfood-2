import random

# Matriz de distâncias (5 pontos)
matriz = [
    [0, 10, 8, 15, 20],
    [10, 0, 12, 18, 25],
    [8, 12, 0, 10, 17],
    [15, 18, 10, 0, 9],
    [20, 25, 17, 9, 0]
]

# Parâmetros
POP, GERACOES, MUTACAO, ELITE = 100, 200, 0.05, 10

def gerar_rota():
    rota = list(range(1, len(matriz)))
    random.shuffle(rota)
    return rota

def custo(rota):
    return matriz[0][rota[0]] + sum(matriz[rota[i]][rota[i+1]] for i in range(len(rota)-1)) + matriz[rota[-1]][0]

def cruzar_simples(p1, p2):
    a, b = sorted(random.sample(range(len(p1)), 2))
    meio = p1[a:b]
    return [x for x in p2 if x not in meio][:a] + meio + [x for x in p2 if x not in meio][a:]

def cruzar_pmx(p1, p2):
    tam, filho = len(p1), [None] * len(p1)
    a, b = sorted(random.sample(range(tam), 2))
    filho[a:b] = p1[a:b]
    for i in range(a, b):
        if p2[i] not in filho:
            val, pos = p2[i], i
            while True:
                pos = p2.index(p1[pos])
                if filho[pos] is None:
                    filho[pos] = val
                    break
    return [p2[i] if filho[i] is None else filho[i] for i in range(tam)]

def mutar(rota):
    if random.random() < MUTACAO:
        i, j = random.sample(range(len(rota)), 2)
        rota[i], rota[j] = rota[j], rota[i]
    return rota

def algoritmo_genetico(nome, cruzamento):
    print(f"\n== {nome} ==")
    pop = [gerar_rota() for _ in range(POP)]
    for _ in range(GERACOES):
        pop.sort(key=custo)
        nova = pop[:ELITE]
        while len(nova) < POP:
            p1, p2 = random.sample(pop[:50], 2)
            nova.append(mutar(cruzamento(p1, p2)))
        pop = nova
    melhor = min(pop, key=custo)
    print("Rota:", [0] + melhor + [0])
    print("Custo:", custo(melhor))

algoritmo_genetico("Cruzamento Simples", cruzar_simples)
algoritmo_genetico("Cruzamento PMX", cruzar_pmx)
